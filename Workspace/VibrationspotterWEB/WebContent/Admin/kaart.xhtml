<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:h="http://java.sun.com/jsf/html"
      xmlns:ui="http://java.sun.com/jsf/facelets"
      xmlns:f="http://java.sun.com/jsf/core">
  <head>
   <link rel = "stylesheet" href ="../stijl/stijl.css"></link>
    <meta name="viewport" content="initial-scale=1.0, user-scalable=no"/>
    <meta charset="utf-8"/>
    <title>kaart</title>
    <style>
      /* Always set the map height explicitly to define the size of the div
       * element that contains the map. */
      #map {
        height: 70%;
        width: 80%;
        margin: 0 auto;
		margin-top: 10px;
		}
      /* Optional: Makes the sample page fill the window. */
      html, body {
        height: 100%;
        margin: 4px;
        padding: 0;
      }
      #description {
        font-family: Roboto;
        font-size: 15px;
        font-weight: 300;
      }

      #infowindow-content .title {
        font-weight: bold;
      }

      #infowindow-content {
        display: none;
      }

      #map #infowindow-content {
        display: inline;
      }

      .pac-card {
        margin: 10px 10px 0 0;
        border-radius: 2px 0 0 2px;
        box-sizing: border-box;
        -moz-box-sizing: border-box;
        outline: none;
        box-shadow: 0 2px 6px rgba(0, 0, 0, 0.3);
        background-color: #fff;
        font-family: Roboto;
      }

      #pac-container {
        padding-bottom: 12px;
        margin-right: 12px;
      }

      .pac-controls {
        display: inline-block;
        padding: 5px 11px;
      }

      .pac-controls label {
        font-family: Roboto;
        font-size: 13px;
        font-weight: 300;
      }

      #pac-input {
        background-color: #fff;
        font-family: Roboto;
        font-size: 15px;
        font-weight: 300;
        margin-left: 12px;
        padding: 0 11px 0 13px;
        text-overflow: ellipsis;
        width: 400px;
      }

      #pac-input:focus {
        border-color: #4d90fe;
      }

      #title {
        color: #fff;
        background-color: #4d90fe;
        font-size: 25px;
        font-weight: 500;
        padding: 6px 12px;
      }
      #target {
        width: 345px;
      }
      
      #legend {
         font-family: Arial, sans-serif;
         background: #fff;
         padding: 10px;
         margin: 10px;
         border: 3px solid #000;
      }
      #legend h3 {
        margin-top: 0;
      }
      #legend img {
        vertical-align: middle;
        }
    </style>
  </head>
  <body>
    <div class="header">
         <h1><b>Welcome to the vibrationspotter</b><img src="logo.png" width="50" height="50"/></h1>
     </div>
     <div class="topnav">
		<a href="index.xhtml">Home</a>
		<a href="projecten.xhtml">Projecten</a>
		<a class="active" href="kaart.xhtml">Kaart</a>
 		<a href="about.xhtml">About</a>
 		<a href="createaccount.xhtml">Create account</a>
 		 <h:form >
 		<h:commandButton styleClass="logout" image="logout.png" value = "uitloggen" action="#{loginController.logout}"/>
 		</h:form>
	</div>
    <input id="pac-input" class="controls" type="text" placeholder="Search Box"/>
    <div id="map"></div>
    <div id="legend"><h3>Legende</h3></div>
    <script>
	var b=0;
	var k=0;
      function initAutocomplete() {
    	  
    	  function controle(x) {
    		  var image;
    		    if(x=='brug'){
    		    	var image = {url: 'rood.png',scaledSize: new google.maps.Size(30, 50)};
    		    	b++;
    		    }
    		    else if(x=='kraan'){
    		    	var image = {url: 'blauw.png',scaledSize: new google.maps.Size(30, 50)};
    		    	k++;
    		    	
    		    }
    		    return image;
    		}
    	  
        var map = new google.maps.Map(document.getElementById('map'), {
          center: {lat: 51.0624935, lng: 3.7066803000000164},
          zoom: 10,
          mapTypeId: 'roadmap'
        });

        // Create the search box and link it to the UI element.
        var input = document.getElementById('pac-input');
        var searchBox = new google.maps.places.SearchBox(input);
        map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);

        // Bias the SearchBox results towards current map's viewport.
        map.addListener('bounds_changed', function() {
          searchBox.setBounds(map.getBounds());
        });

        var markers = [];
        // Listen for the event fired when the user selects a prediction and retrieve
        // more details for that place.
        searchBox.addListener('places_changed', function() {
          var places = searchBox.getPlaces();

          if (places.length == 0) {
            return;
          }

          // Clear out the old markers.
          markers.forEach(function(marker) {
            marker.setMap(null);
          });
          markers = [];

          // For each place, get the icon, name and location.
          var bounds = new google.maps.LatLngBounds();
          places.forEach(function(place) {
            if (!place.geometry) {
              console.log("Returned place contains no geometry");
              return;
            }
            var icon = {
              url: place.icon,
              size: new google.maps.Size(71, 71),
              origin: new google.maps.Point(0, 0),
              anchor: new google.maps.Point(17, 34),
              scaledSize: new google.maps.Size(25, 25)
            };

            // Create a marker for each place.
            markers.push(new google.maps.Marker({
              map: map,
              icon: icon,
              title: place.name,
              position: place.geometry.location
            }));

            if (place.geometry.viewport) {
              // Only geocodes have viewport.
              bounds.union(place.geometry.viewport);
            } else {
              bounds.extend(place.geometry.location);
            }
          });
          map.fitBounds(bounds);
        });
        
        // markers toevoegen
        <ui:repeat value="#{projectManagementEJB.findAllProjecten()}" var="point">
        var marker = new google.maps.Marker({
            position: {lat: #{point.latitude}, lng: #{point.longtitude}},
            map: map,
            title: '#{point.titel}',
            animation: google.maps.Animation.DROP,
            icon: controle('#{point.type}')
          
          });
        
     </ui:repeat>
     
     //legende toegevoegd
     var legend = document.getElementById('legend');
     var div = document.createElement('div');
     var percentstem=parseFloat(k/(k+b)*100).toFixed(2);
     var percentvib=parseFloat(b/(k+b)*100).toFixed(2);
     div.innerHTML = "STEM            :"+ '<img src='blauw.png' style="width: 10%; height: 10%"/>'+"    aantal: "+k+"    ("+percentstem+"%)";
     legend.appendChild(div);
     var div = document.createElement('div');
     div.innerHTML = "vibrationspotter:"+ '<img src='rood.png' style="width: 10%; height: 10%"/>'+"     aantal: "+b+"    ("+percentvib+"%)";
     legend.appendChild(div);
     map.controls[google.maps.ControlPosition.RIGHT_BOTTOM].push(legend);
      }

    </script>
      <script async = "async" defer = "defer"
      src="https://maps.googleapis.com/maps/api/js?key=AIzaSyB4iQ9wgoR3FsIhTKbM8jXAMEJ4TzQwTo0&amp;libraries=places&amp;callback=initAutocomplete"> 
      </script>
  </body>
</html>