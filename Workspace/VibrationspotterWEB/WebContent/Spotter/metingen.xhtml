<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:h="http://java.sun.com/jsf/html"
      xmlns:ui="http://java.sun.com/jsf/facelets"
      xmlns:f="http://java.sun.com/jsf/core"
      xmlns:p="http://primefaces.org/ui"
      >
      
<h:head>
  <title>
    <ui:insert name="title">Metingen</ui:insert>
  </title>
  	<link rel = "stylesheet" href ="../stijl/stijlmetingen.css"></link>
  	<link rel = "stylesheet" href ="../stijl/stijlkaartproject.css"></link>
  	<meta name="viewport" content="initial-scale=1.0, user-scalable=no"/>
    <meta charset="utf-8"/>

</h:head>

 <f:metadata>
 	<f:viewParam name="id" value="#{metingController.project.idProject}" />
 	<f:viewAction action="#{metingController.findMetingenByIdProject}"></f:viewAction>
 </f:metadata>  
 

      
<h:body>
<div class="header">
       <h1><b>Metingen</b> </h1>
</div>
	<h:button id="terug" value="terug naar projecten" outcome="projecten.xhtml"/>
    
<p:dataTable value="#{metingController.metingen}" var="met" style="margin-top:10px">

       <p:column headerText="IdMeting" style="text-align:center;">
        		<h:outputText value="#{met.idMeting}" />
    	</p:column>
    	
    	<p:column headerText="Titel" style="text-align:center;">
        		<h:outputText value="#{met.titel}" />
    	</p:column>
    	
    	<p:column headerText="Tijdstip" style="text-align:center;">
        		<h:outputText value="#{met.tijdstip}" />
    	</p:column>
    	
    	<p:column headerText="Opmerking" style="text-align:center;">
        		<h:outputText value="#{met.opmerking}" />
    	</p:column>
    	
    	<p:column headerText="Foto" style="text-align:center;">
        		 <h:graphicImage value="/image?id=#{met.idMeting}" style="width:32px;height:18px"/>
    	</p:column>
    	
    	<p:column headerText="grafiek" style="text-align:center">
    	  <h:form>
        	<h:commandLink action="#{metingController.toonGrafiek(met)}" class="subAnchor" value="toon grafiek"/>
        </h:form>
        </p:column>
        
        <p:column headerText="Meting wissen" style="text-align:center">
    	  <h:form>
        	<h:commandButton value = "meting wissen" onclick = "return confirm('wilt u zeker deze meting wissen?')" action="#{metingController.wissen(met)}"></h:commandButton>
        </h:form>
        </p:column>

    </p:dataTable>
    
    <input id="pac-input" class="controls" type="text" placeholder="Search Box"/>
    <div id="map"></div>

        <script>
	var b=0;
	var k=0;
      function initAutocomplete() {
    	  
    	  function controle(x) {
    		  var image;
    		    if(x=='Vibrationspotter'){
    		    	var image = {url: '../images/rood.png',scaledSize: new google.maps.Size(30, 50)};
    		    	b++;
    		    }
    		    else if(x=='STEM'){
    		    	var image = {url: '../images/blauw.png',scaledSize: new google.maps.Size(30, 50)};
    		    	k++;
    		    	
    		    }
    		    return image;
    		}
    	  
        var map = new google.maps.Map(document.getElementById('map'), {
          center: {lat: 51.0624935, lng: 3.7066803000000164},
          zoom: 10,
          mapTypeId: 'roadmap'
        });

        // Create the search box and link it to the UI element.
        var input = document.getElementById('pac-input');
        var searchBox = new google.maps.places.SearchBox(input);
        map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);

        // Bias the SearchBox results towards current map's viewport.
        map.addListener('bounds_changed', function() {
          searchBox.setBounds(map.getBounds());
        });

        var markers = [];
        // Listen for the event fired when the user selects a prediction and retrieve
        // more details for that place.
        searchBox.addListener('places_changed', function() {
          var places = searchBox.getPlaces();

          if (places.length == 0) {
            return;
          }

          // Clear out the old markers.
          markers.forEach(function(marker) {
            marker.setMap(null);
          });
          markers = [];

          // For each place, get the icon, name and location.
          var bounds = new google.maps.LatLngBounds();
          places.forEach(function(place) {
            if (!place.geometry) {
              console.log("Returned place contains no geometry");
              return;
            }
            var icon = {
              url: place.icon,
              size: new google.maps.Size(71, 71),
              origin: new google.maps.Point(0, 0),
              anchor: new google.maps.Point(17, 34),
              scaledSize: new google.maps.Size(25, 25)
            };

            // Create a marker for each place.
            markers.push(new google.maps.Marker({
              map: map,
              icon: icon,
              title: place.name,
              position: place.geometry.location
            }));

            if (place.geometry.viewport) {
              // Only geocodes have viewport.
              bounds.union(place.geometry.viewport);
            } else {
              bounds.extend(place.geometry.location);
            }
          });
          map.fitBounds(bounds);
        });
        
        // markers toevoegen
        <ui:repeat value="#{projectController.zoekProject()}" var="point">
        var marker = new google.maps.Marker({
            position: {lat: #{point.latitude}, lng: #{point.longtitude}},
            map: map,
            title: '#{point.titel}',
            animation: google.maps.Animation.DROP,
            icon: controle('#{point.type}')
          
          });
        
     </ui:repeat>
     

      }

</script>

<script async = "async" defer = "defer"
      src="https://maps.googleapis.com/maps/api/js?key=AIzaSyB4iQ9wgoR3FsIhTKbM8jXAMEJ4TzQwTo0&amp;libraries=places&amp;callback=initAutocomplete"> 
</script>
    
</h:body>
</html>
